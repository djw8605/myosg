///////////////////////////////////////////////////////////////////////////////
//
// Clientside JavaScript
//
<?
/*
TODO: this file needs some major cleanup, but I will postpon it until I know
how this file grows and changes overtime - I need to know the patter before
I can restructure it. I have attempted to do this many time, but always came
back to everything being defined here... I need to really think this through..



How to add new page?

1. add entry to menu.phtml (remember the ID)
2. add id to var contentPanel below.
3. create -detail div on static page
4. define and create a component with it of ID-panel (important)  
    and the instance name of ID_obj (important)
        a. set region and other config parameter when initalizing this component
*/

?>

function clone(myObj)
{
    if(typeof(myObj) != 'object') return myObj;
    if(myObj == null) return myObj;

    var myNewObj = new Object();

    for(var i in myObj)
        myNewObj[i] = clone(myObj[i]);

    return myNewObj;
}

//console.log();

///////////////////////////////////////////////////////////////////////////////
//
// Some Global functions
//
//

/*
var detailEl;

// This is the Details panel that contains the description for each example layout.
var informationPanel = {
    id: 'details-panel',
    title: 'Information',
    height: 200,
    region: 'center',
    bodyStyle: 'padding-bottom:15px;background:#eee;',
    autoScroll: true,
    show: function(id) {
        if(!detailEl) {
            var bd = Ext.getCmp('details-panel').body;
            bd.update('').setStyle('background','#fff');
            detailEl = bd.createChild(); //create default empty div
        }
        detailEl.hide().update(Ext.getDom(id+'-details').innerHTML).slideIn('l', {stopFx:true,duration:.2});
    }
};
*/

var home_start_obj = {
    id: 'home_start-panel',
    title: 'Home',
    layout: 'fit',
    bodyStyle: 'padding:25px',
    contentEl: 'start-div',  // pull existing content from the page
    loadPage: function() {}
};


// Go ahead and create the main TreePanel now so that we can use it later
var menuPanel = new Ext.tree.TreePanel({
    id: 'menu-panel',
    title: 'Navigation',
    region:'west',
    split: true,
    width: 200,
    height: 300,
    minSize: 100,
    collapsible: true,
    autoScroll: false,
    margins: '2 0 5 5',
    
    // tree-specific configs:
    rootVisible: false,
    lines: false,
    //singleExpand: true,
    useArrows: true,
    loader: new Ext.tree.TreeLoader({
        dataUrl:'index/menu',
        listeners: {
            load: function(loader, node, resp) {
                menuPanel.getNodeById("<?=$this->initial_page?>").select();
            }
        }
    }),
    
    root: new Ext.tree.AsyncTreeNode()
});

// Assign the changeLayout function to be called on tree node click.
menuPanel.on('click', function(n){
    var sn = this.selModel.selNode || {}; // selNode is null on initial selection
    if(n.leaf && n.id != sn.id){  // ignore clicks on folders and currently selected node 
        //actiavte the panel
        Ext.getCmp('content-panel').layout.setActiveItem(n.id + '-panel');
        Ext.getCmp(n.id+'-panel').loadPage();

        //show help information
        //informationPanel.show(n.id);

        return true;
    } 
    if(!n.leaf) {
        //folder clicked - expand it
        n.expand();
    }
    return false; //don't let change item selection
});

///////////////////////////////////////////////////////////////////////////////
//
// Current Status ServerGrid
//

servergrid_store = new Ext.data.Store({
    proxy: new Ext.data.HttpProxy({
        url: 'current/proxy'
    }),
    reader: new Ext.data.JsonReader()
    //remoteSort: true
    
});

var ServerGrid = function(config) {
    Ext.apply(this, config);

    this.store = servergrid_store;
    this.store.setDefaultSort('name', "ASC"); 

    this.columns = [{
        header: "ID",
        dataIndex: 'resource_id',
        sortable:true,
        hidden: true,
        width: 20 
    },{
        id: 'title',
        header: "Name",
        dataIndex: 'name',
        sortable:true,
        width: 150,
        renderer: this.formatTitle
    },{
        header: "Service Types",
        dataIndex: 'service_types',
        width: 100,
        sortable:true
    },{
        header: "Overall Status",
        dataIndex: 'overall_status',
        width: 70,
        renderer: this.formatStatus,
        sortable:true
    }
    ];

    ServerGrid.superclass.constructor.call(this, {
        region: 'center',
        id: 'server-grid',
        loadMask: {msg:'Loading Data...'},

        sm: new Ext.grid.RowSelectionModel({
            singleSelect:true
        }),

        viewConfig: {
            forceFit:true,
            enableRowBody:true,
            showPreview:false,
            getRowClass : this.applyRowClass
        }
    });

    this.on('rowcontextmenu', this.onContextClick, this);
};

Ext.extend(ServerGrid, Ext.grid.GridPanel, {
    changeFilter: function(value, key) {
        this.store.baseParams[key] = value;
        this.ctxRow = null;
        this.store.reload();
    },
    onContextClick : function(grid, index, e){
        if(!this.menu){ // create context menu on first right click
            this.menu = new Ext.menu.Menu({
                id:'grid-ctx',
                items: [
                {
                    iconCls: 'refresh-icon',
                    text:'Refresh',
                    scope:this,
                    handler: function(){
                        this.ctxRow = null;
                        this.store.reload();
                    }
                }]
            });
            this.menu.on('hide', this.onContextHide, this);
        }
        e.stopEvent();
        if(this.ctxRow){
            Ext.fly(this.ctxRow).removeClass('x-node-ctx');
            this.ctxRow = null;
        }
        this.ctxRow = this.view.getRow(index);
        this.ctxRecord = this.store.getAt(index);
        Ext.fly(this.ctxRow).addClass('x-node-ctx');
        this.menu.showAt(e.getXY());
    },

    onContextHide : function(){
        if(this.ctxRow){
            Ext.fly(this.ctxRow).removeClass('x-node-ctx');
            this.ctxRow = null;
        }
    },

    loadPage: function(page) {
        this.store.baseParams["feed"] = page;
        this.ctxRow = null;
        this.store.load();
    },

    togglePreview : function(show){
        this.view.showPreview = show;
        this.view.refresh();
    },

    // within this function "this" is actually the GridView
    applyRowClass: function(record, rowIndex, p, ds) {
        if (this.showPreview) {
            var xf = Ext.util.Format;
            p.body = '<p>' + xf.ellipsis(xf.stripTags(record.data.summary), 200) + '</p>';
            return 'x-grid3-row-expanded';
        }
        return 'x-grid3-row-collapsed';
    },

    formatTimeAgo: function(sec) {
        var out = "unknown";
        var day = Math.round(sec / (3600*24));
        if(day > 1) {
            out = day + ' days ago';
        } else {
            var hour = Math.round(sec / 3600);
            if(hour > 1) {
                out = hour + ' hours ago';
            } else {
                var min = Math.round(sec / 60);
                out = min + ' minutes ago';
            }
        }
        return out;
    },

    formatDate : function(date) {
        if (!date) {
            return '';
        }
        var now = new Date();
        var d = now.clearTime(true);
        var notime = date.clearTime(true).getTime();
        if (notime == d.getTime()) {
            return 'Today ' + date.dateFormat('g:i a');
        }
        d = d.add('d', -6);
        if (d.getTime() <= notime) {
            return date.dateFormat('D g:i a');
        }
        return date.dateFormat('n/j g:i a');
    },

    formatURL: function(value, p, record) {
        return String.format('<a target="{1}" href="{0}">{0}</a>', value, record.data.name);
    },
    formatAdmin: function(value, p, record) {
        return String.format('{0}', value, record.data.admin_email);
    },

    formatTitle: function(value, p, record) {
        var str = "";
        str += String.format('<div class="server"><b>{0}</b><br/> ', value);
        str += String.format('<span class="servername">{0}</span></div>', record.data.uri);
        return str;
    },
    formatStatus: function(value, p, record) {
        //something similar exists in control/CurrentController
        if(value == "") value = "UNKNOWN";
        return '<div class="status_icon_holder status_'+value+'"/>';
    }
});

///////////////////////////////////////////////////////////////////////////////
//
// DetailPanel
//

var DetailPanel = {
};

DetailPanel.LinkInterceptor = {
    render: function(p){
        p.body.on({
            'mousedown': function(e, t){ // try to intercept the easy way
                t.target = '_blank';
            },
            'click': function(e, t){ // if they tab + enter a link, need to do it old fashioned way
                if(String(t.target).toLowerCase() != '_blank'){
                    e.stopEvent();
                    window.open(t.href);
                }
            },
            delegate:'a'
        });
    }
};

///////////////////////////////////////////////////////////////////////////////
//
// Current_MainPanel (contains ServerGrid and DetailPanel)
//

var Current_MainPanel = function(){
    //instanciate ServerGrid
    this.grid = new ServerGrid({
        minSize: 100, //this is not working??
        tbar:[
            {
                split:true,
                text:'Detail Panel',
                tooltip: {title:'Metircs Panel',text:'Show, move or hide the Detail Panel'},
                iconCls: 'preview-bottom',
                handler: this.moveDetailPanel.createDelegate(this, []),
                menu:{
                    id:'reading-menu',
                    cls:'reading-menu',
                    width:100,
                    items: [{
                        text:'Bottom',
                        checked:true,
                        group:'rp-group',
                        checkHandler:this.moveDetailPanel,
                        scope:this,
                        iconCls:'preview-bottom'
                    },{
                        text:'Right',
                        checked:false,
                        group:'rp-group',
                        checkHandler:this.moveDetailPanel,
                        scope:this,
                        iconCls:'preview-right'
                    },{
                        text:'Hide',
                        checked:false,
                        group:'rp-group',
                        checkHandler:this.moveDetailPanel,
                        scope:this,
                        iconCls:'preview-hide'
                    }]
                }
            },
            '-',
            {
                pressed: false,
                enableToggle:true,
                text:'Summary',
                tooltip: {title:'Resource Summary',text:'View a short summary of each item in the list'},
                iconCls: 'summary',
                scope:this,
                toggleHandler: function(btn, pressed){
                    this.grid.togglePreview(pressed);
                }
            },
            '-',
            {
                text:'Exports',
                tooltip: {text:'Export raw data for this data source in various data formats.'},
                iconCls: 'export',
                menu:{
                    id:'export-menu',
                    items: [
                    {
                        text:'JSON',
                        handler:function() {
                            var param = jQuery.param(this.grid.store.baseParams);
                            window.open("<?=base()?>/current/proxy?format=json&"+param);
                        },
                        scope:this
                    },{
                        text:'CSV',
                        handler:function() {
                            var param = jQuery.param(this.grid.store.baseParams);
                            window.open("<?=base()?>/current/proxy?format=csv&"+param);
                        },
                        scope:this
                    },
                    {
                        text:'XML',
                        handler:function() {
                            var param = jQuery.param(this.grid.store.baseParams);
                            window.open("<?=base()?>/current/proxy?format=xml&"+param);
                        },
                        scope:this
                    }]
                }
            }
        ],
        bbar: [
            '<span id="current_resourcecount">&nbsp;</span>'
        ]
    });
    
    //instanciate DetailPanel
    this.detailpanel = new Ext.Panel({
        title: 'Metric Detail',
        id: 'detailpanel',
        region: 'south',
        cls:'preview',
        autoScroll: true,
        listeners: DetailPanel.LinkInterceptor,
        tbar: [{
            id:'tab',
            text: 'View in New Tab',
            iconCls: 'new-tab',
            disabled:true,
            handler : this.openTab,
            scope: this
        }, '-',
        {
            id:'giptab',
            text: 'Show GIP Information',
            iconCls: 'new-tab',
            disabled:true,
            handler : this.openGIPTab,
            scope: this
        }, '-',
        {
            text:'Exports',
            tooltip: {text:'Export raw data for this data source in various data formats.'},
            iconCls: 'export',
            menu:{
                items: [{
                    text:'XML',
                    handler:function() {
                        var resource_id = this.grid.getSelectionModel().getSelected().data.resource_id;
                        window.open("<?=base()?>/current/proxy?feed=detail&id="+resource_id+"&format=xml");
                    },
                    scope:this
                }]
            }
        }
        <?php
        if(user()->hasRole(role::$view_admin_email)) { 
        ?>
            ,'-',{
                id:'win',
                text: 'Email Administrator',
                iconCls: 'email',
                disabled:true,
                scope: this,
                handler : function(){
                    document.location=formatCurrentStatusEmail(this.gsm.getSelected().data);
                }
            }
        <?php
        }
        ?>
        ]
    });

    Current_MainPanel.superclass.constructor.call(this, {
        id:'current_detail-panel',

        activeTab:0,
        resizeTabs:true,
        enableTabScroll: true,

        region:'center',
        margins:'0 5 5 0',
        border:false,
        tabWidth:150,
        items: {
            id:'main-view',
            layout:'border',
            title:'Loading...',
            hideMode:'offsets',
            items:[
                this.grid, 
                {
                    id:'bottom-detail',
                    layout:'fit',
                    items:this.detailpanel,
                    height: 250,
                    minSize: 100,
                    split: true,
                    border:false,
                    region:'south'
                },{
                    id:'right-detail',
                    layout:'fit',
                    border:false,
                    region:'east',
                    width:350,
                    minSize: 100,
                    split: true,
                    hidden:true
                }
            ]
        }
    });

    this.gsm = this.grid.getSelectionModel();

    this.gsm.on('rowselect', function(sm, index, record){
        getPanelTemplate("current_status_detail_").overwrite(this.detailpanel.body, record.data);
        var items = this.detailpanel.topToolbar.items;
        items.get('tab').enable();
        items.get('giptab').enable();
        <?php if(user()->hasRole(role::$view_admin_email)) { ?>
            items.get('win').enable();
        <? } ?>
        var r = Math.random(); //prevent browser caching
        $("#current_status_detail_"+record.data.resource_id).load("current/proxy?feed=detail&id="+record.data.resource_id+"&random="+r);
    }, this, {buffer:250});

    this.grid.store.on('load', this.gsm.selectFirstRow, this.gsm);
    this.grid.store.on('load', function() {
        $("#current_resourcecount").html("Resources Shown: "+this.store.getCount());
    }, this.grid);

    this.grid.on('rowdblclick', this.openTab, this);

};

Ext.extend(Current_MainPanel, Ext.TabPanel, {
    loadPage: function() {
        this.grid.loadPage("resource");
        Ext.getCmp('main-view').setTitle("All Resources");
    },

    moveDetailPanel: function(m, pressed){
        if(!m){ // cycle if not a menu item click
            var readMenu = Ext.menu.MenuMgr.get('reading-menu');
            readMenu.render();
            var items = readMenu.items.items;
            var b = items[0], r = items[1], h = items[2];
            if(b.checked){
                r.setChecked(true);
            }else if(r.checked){
                h.setChecked(true);
            }else if(h.checked){
                b.setChecked(true);
            }
            return;
        }
        if(pressed){
            var detailpanel = this.detailpanel;
            var right = Ext.getCmp('right-detail');
            var bot = Ext.getCmp('bottom-detail');
            var btn = this.grid.getTopToolbar().items.get(0);
            switch(m.text){
                case 'Bottom':
                    right.hide();
                    bot.add(detailpanel);
                    bot.show();
                    bot.ownerCt.doLayout();
                    btn.setIconClass('preview-bottom');
                    break;
                case 'Right':
                    bot.hide();
                    right.add(detailpanel);
                    right.show();
                    right.ownerCt.doLayout();
                    btn.setIconClass('preview-right');
                    break;
                case 'Hide':
                    detailpanel.ownerCt.hide();
                    detailpanel.ownerCt.ownerCt.doLayout();
                    btn.setIconClass('preview-hide');
                    break;
            }
        }
    },

    openTab : function(record){
        record = (record && record.data) ? record : this.gsm.getSelected();
        var d = record.data;
        var id = d.resource_id;
        var tab;
        if(!(tab = this.getItem('current_status_detail_tabpanel'+id))){
            tab = new Ext.Panel({
                id:'current_status_detail_tabpanel'+id,
                cls:'preview single-preview',
                title: d.name,
                tabTip: d.uri,
                html: getPanelTemplate("current_status_detail_tab").apply(d),
                closable:true,
                listeners: DetailPanel.LinkInterceptor,
                autoScroll:true,
                border:true,
                tbar: [
                    {
                        id:'giptab',
                        text: 'Show GIP Information',
                        iconCls: 'new-tab',
                        handler : this.openGIPTab,
                        scope: this
                    }
                <?php
                if(user()->hasRole(role::$view_admin_email)) { 
                ?>
                    , '-', {
                        text: 'Email Administrator',
                        iconCls: 'email',
                        handler : function(){
                            document.location=formatCurrentStatusEmail(d);
                        }
                    }
                <?
                }
                ?>
                ]
            });
            this.add(tab);
        }
        this.setActiveTab(tab);
        var r = Math.random(); //prevent browser caching
        $("#current_status_detail_tab"+d.resource_id).load("current/proxy?feed=detail&id="+d.resource_id+"&random="+r);
    },

    openGIPTab : function(record){
        record = (record && record.data) ? record : this.gsm.getSelected();
        var d = record.data;
        var id = d.resource_id;
        var tab;
        if(!(tab = this.getItem('current_status_gip_tabpanel'+id))){
            tab = new Ext.Panel({
                id:'current_status_gip_tabpanel'+id,
                title: d.name+' (GIP)',
                tabTip: 'GIP Information from CEMon/BDII for '+d.name,
                html: 'Loading..',
                closable:true,
                autoLoad:"current/proxy?feed=glue&name="+d.name,
                cls: "gippanel",
                border:true
            });
            this.add(tab);
        }
        this.setActiveTab(tab);
    },

    openAll : function(){
        this.beginUpdate();
        this.grid.store.data.each(this.openTab, this);
        this.endUpdate();
    }

});
var current_detail_obj = new Current_MainPanel();

///////////////////////////////////////////////////////////////////////////////
//
// VO Matix MainPanel
//

var VOMatrixGrid = function(config) {
    Ext.apply(this, config);

    this.store = new Ext.data.Store({
        proxy: new Ext.data.HttpProxy({
            url: 'current/proxy'
        }),
        baseParams: {
            feed: 'vo'
        },
        remoteSort: true,
        reader: new Ext.data.JsonReader()
    });
    this.store.setDefaultSort('name', "ASC"); 

    this.pagingBar = new Ext.PagingToolbar({
        pageSize: 25,
        store: this.store,
        displayInfo: true,
        displayMsg: 'Displaying Resources {0} - {1} of {2}',
        emptyMsg: "No resources to display"
    });

    this.columns = [{
        header: "ID",
        dataIndex: 'resource_id',
        width: 30,
        hidden: true,
        sortable:true
    },{
        id: 'name',
        header: "Resource Name",
        dataIndex: 'name',
        width: 150,
        renderer: this.formatTitle,
        sortable:true
    }
    <?
    $vo_model = new VO();
    $vos = $vo_model->fetchAll();
    $odd = false;
    foreach($vos as $vo) {
    ?>
        ,{
            header: "<img class='voname' src='image/rotate?text=<?=$vo->short_name?>&angle=90'/>",
            dataIndex: '<?=$vo->short_name?>',
            tooltip: '<?=$vo->long_name?>',
            renderer: this.formatCheck,
            width: 23,
            //Resource.php doesn't support sorting by VO name!
            sortable:false
        }
    <?
    }
    ?>
    ];

    VOMatrixGrid.superclass.constructor.call(this, {
        sm: new Ext.grid.RowSelectionModel({singleSelect:true}),
        title:'Virtual Organization Matrix',
        id:'vo_matrix-panel',
        region:'center',
        margins:'0 5 5 0',
        loadMask: {msg:'Loading Data...'},
        border:true,
        enableHdMenu:false,
        disableSelection:true,
        buttonAlign:'center',
        tbar: [
            {
                text:'Exports',
                tooltip: {text:'Export raw data for this data source in various data formats.'},
                iconCls: 'export',
                menu:{
                    id:'export-menu',
                    items: [
                    {
                        text:'JSON',
                        handler:function() {
                            //clear start & limit
                            var param = jQuery.param(this.store.baseParams);
                            window.open("<?=base()?>/current/proxy?format=json&"+param);
                        },
                        scope:this
                    },{
                        text:'CSV',
                        handler:function() {
                            var param = jQuery.param(this.store.baseParams);
                            window.open("<?=base()?>/current/proxy?format=csv&"+param);
                        },
                        scope:this
                    },{
                        text:'XML',
                        handler:function() {
                            var param = jQuery.param(this.store.baseParams);
                            window.open("<?=base()?>/current/proxy?format=xml&"+param);
                        },
                        scope:this
                    }]
                }
            },
            '-'
        ],
        bbar: this.pagingBar
    });

    this.on('rowcontextmenu', this.onContextClick, this);
};

Ext.extend(VOMatrixGrid, Ext.grid.GridPanel, {
    formatCheck: function(value, p, record, rowidx, colidx) {
        if(value == "1") p.css += "icon-ok";
        if(colidx % 2 == 0) {
            p.css += " gray_column";
        }
        return "";
    },
    formatTitle: function(value, p, record) {
        var str = "";
        str += String.format('<div class="server"><b>{0}</b> ', value);
        return str;
    },
    loadPage: function(){
        this.ctxRow = null;
        this.store.load({params:{start:0, limit:25}});
    },
    changeFilter: function(value, key) {
        this.store.baseParams[key] = value;
        this.ctxRow = null;
        this.store.reload();
    }
});

var vo_matrix_obj = new VOMatrixGrid();

///////////////////////////////////////////////////////////////////////////////
//
// VO Matix MainPanel (2)
//

var VOGroupGrid = function(config) {
    Ext.apply(this, config);

    this.store = new Ext.data.GroupingStore({
        proxy: new Ext.data.HttpProxy({
            url: 'current/proxy'
        }),
        reader: new Ext.data.JsonReader(
            { 
                totalProperty: 'results',
                root: 'rows',
                id: 'id'
            }, [
                {name:'id', sortType:'asInt'},
                {name:'resource_id', sortType:'asInt'},
                'name', 
                'vo',
                'vo_name',
                {name:'vo_short_name', sortType:'asUCString'}
            ]
        ),
        groupField:'vo_short_name',
        sortInfo:{field: 'name', direction: "ASC"}
    });

    this.columns = [{
        id: 'resource_id',
        header: "ID",
        dataIndex: 'resource_id',
        width: 30,
        hidden: true,
        sortable:true
    },{
        id: 'title',
        header: "Resource Name",
        dataIndex: 'name',
        width: 150,
        renderer: this.formatTitle,
        sortable:true
    },{
        id: 'vo',
        header: "Virtual Organization",
        dataIndex: 'vo_short_name',
        hidden:true,
        renderer: this.formatVO,
        sortable:true
    }];

    this.view = new Ext.grid.GroupingView({
        forceFit:true,
        groupTextTpl: '{group} ({[values.rs.length]} {[values.rs.length > 1 ? "Resources" : "Resource"]})',
        startCollapsed: true
    });

    VOGroupGrid.superclass.constructor.call(this, {
        sm: new Ext.grid.RowSelectionModel({singleSelect:true}),
        title:'Virtual Organization Members',
        id:'vo_group-panel',
        region:'center',
        margins:'0 5 5 0',
        loadMask: {msg:'Loading Data...'},
        border:true,
        viewConfig: {
            forceFit:true
        }
    });
    this.on('rowcontextmenu', this.onContextClick, this);
};

Ext.extend(VOGroupGrid, Ext.grid.GridPanel, {
    formatTitle: function(value, p, record) {
        var str = "";
        str += String.format('<div class="server"><b>{0}</b> ', value);
        return str;
    },
    formatVO: function(value, p, record) {
        var str = "";
        str += record.data.vo_short_name + " - " + record.data.vo_name + " ";
        return str;
    },
    loadPage: function(){
        this.store.baseParams["feed"] = "vogroup";
        this.ctxRow = null;
        this.store.load();
    },
    changeFilter: function(value, key) {
        this.store.baseParams[key] = value;
        this.ctxRow = null;
        this.store.reload();
    }
});

var vo_group_obj = new VOGroupGrid();

///////////////////////////////////////////////////////////////////////////////
//
// Status Overview (Gmap)
//
var Overview = function(config) {
    Ext.apply(this, config);
    Overview.superclass.constructor.call(this, {
        id: 'current_overview-panel',
        title: 'Resource Group Map',
        tbar: ['&nbsp;'],
        layout: 'fit',
        zoomLevel: 4,       //2 is better for whole world
        gmapType: 'map',
        addControl: new GSmallMapControl(),
        setCenter: { lat: 50, 'long': -85 }
    });
};
Ext.extend(Overview, Ext.ux.GMapPanel, {
    loadPage: function() {
        this.gmap.checkResize();
        var param = jQuery.param(this.baseParams);
        $.getJSON("current/proxy?feed=gmap&"+param,
            function(data){
                current_overview_obj.gmap.clearOverlays();
                $.each(data.markers, function(i,marker){
                    current_overview_obj.addMarker(
                        new GLatLng(marker.lat,marker['long']),
                        marker.marker,
                        false,
                        marker.setCenter, 
                        marker.info
                    );
                });
            }
        );
    },
    baseParams: new Object,
    changeFilter: function(value, key) {
        this.baseParams[key] = value;
        this.loadPage();
    }
});
var current_overview_obj = new Overview();

var icon_ok = new GIcon();
icon_ok.image = "images/status_ok.png";
icon_ok.iconAnchor = new GPoint(12, 12);
icon_ok.infoWindowAnchor = new GPoint(12, 12);
icon_ok.iconSize = new GSize(24, 24);
icon_ok.shadow = "images/shadow.png";
icon_ok.shadowSize = new GSize(30, 30);

var icon_warning = new GIcon();
icon_warning.image = "images/status_warning.png";
icon_warning.iconAnchor = new GPoint(12, 12);
icon_warning.infoWindowAnchor = new GPoint(12, 12);
icon_warning.iconSize = new GSize(24, 24);
icon_warning.shadow = "images/shadow.png";
icon_warning.shadowSize = new GSize(30, 30);

var icon_unknown = new GIcon();
icon_unknown.image = "images/status_unknown.png";
icon_unknown.iconAnchor = new GPoint(12, 12);
icon_unknown.infoWindowAnchor = new GPoint(12, 12);
icon_unknown.iconSize = new GSize(24, 24);
icon_unknown.shadow = "images/shadow.png";
icon_unknown.shadowSize = new GSize(30, 30);

var icon_critical = new GIcon();
icon_critical.image = "images/status_critical.png";
icon_critical.iconAnchor = new GPoint(12, 12);
icon_critical.infoWindowAnchor = new GPoint(12, 12);
icon_critical.iconSize = new GSize(24, 24);
icon_critical.shadow = "images/shadow.png";
icon_critical.shadowSize = new GSize(30, 30);

///////////////////////////////////////////////////////////////////////////////
//
// HistoryGrid
//

var HistoryGrid = function(config) {
    Ext.apply(this, config);

    this.store = new Ext.data.Store({
        proxy: new Ext.data.HttpProxy({
            url: 'history/resource'
        }),
        reader: new Ext.data.JsonReader(
            {
                root: 'graphs',
                totalProperty: 'totalCount',
                id: 'resource_id'
            }, [
                {name: 'resource_id', mapping: 'resource_id', sortType:'asInt'},
                {name: 'name', mapping: 'name'},
                {name: 'uri', mapping: 'fqdn'},
                {name: 'graph', mapping: 'graph'},
                {name: 'url', mapping: 'url'},
                {name: 'service_types', mapping: 'service_types'}
            ]
        )
    });
    this.store.setDefaultSort('name', "ASC"); 

    this.columns = [{
        header: "ID",
        dataIndex: 'resource_id',
        sortable:true,
        hidden: true,
        width: 10 
    },{
        id: 'title',
        header: "Name",
        dataIndex: 'name',
        sortable:true,
        width: 150,
        renderer: this.formatTitle
    }
    ];

    HistoryGrid.superclass.constructor.call(this, {
        region: 'center',
        id: 'topic-grid',
        loadMask: {msg:'Loading Data...'},

        sm: new Ext.grid.RowSelectionModel({
            singleSelect:true
        }),

        viewConfig: {
            forceFit:true,
            enableRowBody:true,
            showPreview:true,
            getRowClass : this.applyRowClass
        }
    });

    this.on('rowcontextmenu', this.onContextClick, this);
};

Ext.extend(HistoryGrid, Ext.grid.GridPanel, {
    changeFilter: function(value, key) {
        this.store.baseParams[key] = value;
        this.ctxRow = null;
        this.store.reload();
    },
    onContextClick : function(grid, index, e){
        if(!this.menu){ // create context menu on first right click
            this.menu = new Ext.menu.Menu({
                id:'grid-ctx',
                items: [{
                    iconCls: 'refresh-icon',
                    text:'Refresh',
                    scope:this,
                    handler: function(){
                        this.ctxRow = null;
                        this.store.reload();
                    }
                }]
            });
            this.menu.on('hide', this.onContextHide, this);
        }
        e.stopEvent();
        if(this.ctxRow){
            Ext.fly(this.ctxRow).removeClass('x-node-ctx');
            this.ctxRow = null;
        }
        this.ctxRow = this.view.getRow(index);
        this.ctxRecord = this.store.getAt(index);
        Ext.fly(this.ctxRow).addClass('x-node-ctx');
        this.menu.showAt(e.getXY());
    },
    onContextHide : function(){
        if(this.ctxRow){
            Ext.fly(this.ctxRow).removeClass('x-node-ctx');
            this.ctxRow = null;
        }
    },
    loadPage: function(page) {
        this.ctxRow = null;
        this.store.baseParams["feed"] = page;
        var startdate = history_detail_obj.start_date.picker.getValue();
        var enddate = history_detail_obj.end_date.picker.getValue();
        this.store.baseParams["start_time"] = startdate.getTime()/1000;
        this.store.baseParams["end_time"] = enddate.getTime()/1000;
        this.store.load();
    },
    togglePreview : function(show){
        this.view.showPreview = show;
        //this.view.refresh();
    },
    // within this function "this" is actually the GridView
    applyRowClass: function(record, rowIndex, p, ds) {
        if (this.showPreview) {
            var xf = Ext.util.Format;
            p.body = record.data.graph;
            return 'x-grid3-row-expanded';
        }
        return 'x-grid3-row-collapsed';
    },
    formatTitle: function(value, p, record) {
        var str = "";
        str += String.format('<div class="server"><b>{0}</b><br/>', value);
        str += String.format('<span class="servername">{0}</span></div>', record.data.uri);
        return str;
    }
});

function getPanelTemplate(type) {
    var tmp = '<div class="post-data"> <span class="post-date"><a href="{url}" target="{name}">{url}</a></span><table><tr><th>Name:</th><td><div class="server"><b>{name}</b> <span class="servername">{uri}</span></div></td></tr><tr><th>Service Types:</th><td><h4 class="post-author">{service_types}</h4></td></tr></table></div> <div class="post-body" id="%id_prefix%{resource_id}"> <img src="images/large-loading.gif" width="32" height="32" align="middle"/> &nbsp;&nbsp;&nbsp; Loading ...</div>';
    return new Ext.Template(tmp.replace("%id_prefix%", type));
}
function formatCurrentStatusEmail(d) {
    var body = "mailto:"+d.admin_email+"?subject=Regarding OSG Resource: "+d.name;
    body += "&body=Dear "+d.admin_name+",%0A%0A";
    body += "I have a question regarding following OSG resource.%0A%0A";
    body += "Resource Name: "+d.name+"%0A";
    body += "Current Status: "+d.overall_status+"%0A";
    body += "Summary: "+d.summary;
    return body;
}


///////////////////////////////////////////////////////////////////////////////
//
// HistoryDetailPanel
//

var HistoryDetailPanel = {};
HistoryDetailPanel.LinkInterceptor = {
    render: function(p){
        p.body.on({
            'mousedown': function(e, t){ // try to intercept the easy way
                t.target = '_blank';
            },
            'click': function(e, t){ // if they tab + enter a link, need to do it old fashioned way
                if(String(t.target).toLowerCase() != '_blank'){
                    e.stopEvent();
                    window.open(t.href);
                }
            },
            delegate:'a'
        });
    }
};

///////////////////////////////////////////////////////////////////////////////
//
// History_MainPanel (contains HistoryGrid and HistoryDetailPanel)
//

var History_MainPanel = function(){
    this.start_date = new Ext.menu.DateMenu({
        handler : function(dp, date){
            history_detail_obj.setStartDateLabel(date);

            var min_date = new Date();
            min_date.setTime(date.getTime() + 3600*24*1000);
            history_detail_obj.end_date.picker.minDate = min_date;

            var startdate = history_detail_obj.start_date.picker.getValue();
            var enddate = history_detail_obj.end_date.picker.getValue();

            delete history_detail_obj.end_date.picker.activeDate;
            history_detail_obj.end_date.picker.setValue(enddate);

            history_detail_obj.grid.loadPage("resource");
        }
    });
    
    this.end_date = new Ext.menu.DateMenu({
        handler : function(dp, date){
            history_detail_obj.setEndDateLabel(date);

            //make sure there will be at least one day between start and end
            var max_date = new Date();
            max_date.setTime(date.getTime() - 3600*24*1000);
            history_detail_obj.start_date.picker.maxDate = max_date;

            var startdate = history_detail_obj.start_date.picker.getValue();
            var enddate = history_detail_obj.end_date.picker.getValue();

            delete history_detail_obj.start_date.picker.activeDate;
            history_detail_obj.start_date.picker.setValue(startdate);

            history_detail_obj.grid.loadPage("resource");
        }
    });

    //don't allow selecting future date
    var d = new Date();
    d.setTime(<?=time()?>*1000);
    this.end_date.picker.maxDate = d;

    this.grid = new HistoryGrid({
        tbar:[
            {
                split:true,
                text:'Detail Panel',
                tooltip: {title:'Detail Panel',text:'Show, move or hide the History Detail Panel'},
                iconCls: 'preview-bottom',
                handler: this.moveDetailPanel.createDelegate(this, []),
                menu:{
                    id:'history-menu',
                    cls:'reading-menu',
                    items: [{
                        text:'Bottom',
                        checked:true,
                        group:'rp-group',
                        checkHandler:this.moveDetailPanel,
                        scope:this,
                        iconCls:'preview-bottom'
                    },{
                        text:'Right',
                        checked:false,
                        group:'rp-group',
                        checkHandler:this.moveDetailPanel,
                        scope:this,
                        iconCls:'preview-right'
                    },{
                        text:'Hide',
                        checked:false,
                        group:'rp-group',
                        checkHandler:this.moveDetailPanel,
                        scope:this,
                        iconCls:'preview-hide'
                    }]
                }
            },
/*
            '-',
            {
                pressed: true,
                enableToggle:true,
                text:'Graph',
                tooltip: {title:'History Graph',text:'View a summary graph of each resrouces'},
                iconCls: 'summary',
                scope:this,
                toggleHandler: function(btn, pressed){
                    this.grid.togglePreview(pressed);
                }
            },
*/
            '-',
            'Date Range',
            {
                id: 'history_start_date',
                iconCls: 'calendar',
                text: 'XXXXXXXXXXXXX',
                menu: this.start_date
            },
            'To',
            {
                id: 'history_end_date',
                iconCls: 'calendar',
                text: 'XXXXXXXXXXXXX',
                menu: this.end_date
            },
            '-',
            {
                text:'Exports',
                tooltip: {text:'Export raw data for this data source in various data formats.'},
                iconCls: 'export',
                menu:{
                    id:'export-menu',
                    items: [
                    {
                        text:'JSON',
                        handler:function() {
                            var param = jQuery.param(this.grid.store.baseParams);
                            window.open("<?=base()?>/history/resource/?format=json&"+param);
                        },
                        scope:this
                    },{
                        text:'CSV',
                        handler:function() {
                            var param = jQuery.param(this.grid.store.baseParams);
                            window.open("<?=base()?>/history/resource/?format=csv&"+param);
                        },
                        scope:this
                    },
                    {
                        text:'XML',
                        handler:function() {
                            var param = jQuery.param(this.grid.store.baseParams);
                            window.open("<?=base()?>/history/resource/?format=xml&"+param);
                        },
                        scope:this
                    }]
                }
            }
        ],
        bbar: [
            '<span id="history_resourcecount">&nbsp;</span>'
        ]
    });

    //instanciate HistoryDetailPanel
    this.detailpanel = new Ext.Panel({
        title: 'History Detail',
        id:'historydetailpanel',
        region: 'south',
        cls:'preview',
        autoScroll: true,
        listeners: HistoryDetailPanel.LinkInterceptor,
        tbar: [{
            id:'history-tab',
            text: 'View in New Tab',
            iconCls: 'new-tab',
            disabled:true,
            handler : this.openTab,
            scope: this
        }, '-',
        {
            id:'history-giptab',
            text: 'Show GIP Information',
            iconCls: 'new-tab',
            disabled:true,
            handler : this.openGIPTab,
            scope: this
        }, '-',
        {
            text:'Exports',
            tooltip: {text:'Export raw data for this data source in various data formats.'},
            iconCls: 'export',
            menu:{
                id:'export-menu',
                items: [{
                    text:'XML',
                    handler:function() {
                        var start_time= history_detail_obj.start_date.picker.getValue().getTime()/1000;
                        var end_time= history_detail_obj.end_date.picker.getValue().getTime()/1000;
                        var id = this.grid.getSelectionModel().getSelected().data.resource_id;
                        window.open("<?=base()?>/history/proxy?feed=detail&id="+id+"&start_time="+start_time+"&end_time="+end_time+"&format=xml");
                    },
                    scope:this
                }/*,{
                    text:'JSON',
                    handler:function() {
                        var start_time= history_detail_obj.start_date.picker.getValue().getTime()/1000;
                        var end_time= history_detail_obj.end_date.picker.getValue().getTime()/1000;
                        var id = this.grid.getSelectionModel().getSelected().data.resource_id;
                        window.open("<?=base()?>/history/proxy?feed=detail&id="+id+"&start_time="+start_time+"&end_time="+end_time+"&format=json");
                    },
                    scope:this
                },{
                    text:'CSV',
                    handler:function() {
                        var start_time= history_detail_obj.start_date.picker.getValue().getTime()/1000;
                        var end_time= history_detail_obj.end_date.picker.getValue().getTime()/1000;
                        var id = this.grid.getSelectionModel().getSelected().data.resource_id;
                        window.open("<?=base()?>/history/proxy?feed=detail&id="+id+"&start_time="+start_time+"&end_time="+end_time+"&format=csv");
                    },
                    scope:this
                }*/
                ]
            }
        }
        ]
    });

    History_MainPanel.superclass.constructor.call(this, {
        id:'history_overview-panel',

        activeTab:0,
        enableTabScroll: true,
        resizeTabs:true, 
        tabWidth:150,

        region:'center',
        margins:'0 5 5 0',
        border:false,
        items: {
            id:'history-main-view',
            layout:'border',
            title:'Loading...',
            hideMode:'offsets',
            items:[
                this.grid, 
                {
                    id:'history-bottom-detail',
                    layout:'fit',
                    items:this.detailpanel,
                    height: 250,
                    minSize: 100,
                    split: true,
                    border:false,
                    region:'south'
                },{
                    id:'history-right-detail',
                    layout:'fit',
                    border:false,
                    region:'east',
                    width:350,
                    minSize: 100,
                    split: true,
                    hidden:true
                }
            ]
        }
    });

    this.gsm = this.grid.getSelectionModel();

    this.gsm.on('rowselect', function(sm, index, record){
        getPanelTemplate("history_detail_").overwrite(this.detailpanel.body, record.data);
        var items = this.detailpanel.topToolbar.items;
        items.get('history-giptab').enable();
        items.get('history-tab').enable();
        this.loadDetail(record.data.resource_id, "");
    }, this, {buffer:250});

    this.grid.store.on('load', this.gsm.selectFirstRow, this.gsm);
    this.grid.store.on('load', function() {
        $("#history_resourcecount").html("Resources Shown: "+this.store.getCount());
    }, this.grid);

    this.grid.on('rowdblclick', this.openTab, this);
};

Ext.extend(History_MainPanel, Ext.TabPanel, {
    loadPage: function(page){
        this.grid.loadPage("resource");
        Ext.getCmp('history-main-view').setTitle("All Resources");
    },

    moveDetailPanel: function(m, pressed){
        if(!m){ // cycle if not a menu item click
            var readMenu = Ext.menu.MenuMgr.get('history-menu');
            readMenu.render();
            var items = readMenu.items.items;
            var b = items[0], r = items[1], h = items[2];
            if(b.checked){
                r.setChecked(true);
            }else if(r.checked){
                h.setChecked(true);
            }else if(h.checked){
                b.setChecked(true);
            }
            return;
        }
        if(pressed){
            var detailpanel = this.detailpanel;
            var right = Ext.getCmp('history-right-detail');
            var bot = Ext.getCmp('history-bottom-detail');
            var btn = this.grid.getTopToolbar().items.get(0);
            switch(m.text){
                case 'Bottom':
                    right.hide();
                    bot.add(detailpanel);
                    bot.show();
                    bot.ownerCt.doLayout();
                    btn.setIconClass('preview-bottom');
                    break;
                case 'Right':
                    bot.hide();
                    right.add(detailpanel);
                    right.show();
                    right.ownerCt.doLayout();
                    btn.setIconClass('preview-right');
                    break;
                case 'Hide':
                    detailpanel.ownerCt.hide();
                    detailpanel.ownerCt.ownerCt.doLayout();
                    btn.setIconClass('preview-hide');
                    break;
            }
        }
    },

    openTab : function(record){
        record = (record && record.data) ? record : this.gsm.getSelected();
        var d = record.data;
        var id = d.resource_id;
        var tab;
        if(!(tab = this.getItem('history_detail_tabpanel'+id))){
            tab = new Ext.Panel({
                id:'history_detail_tabpanel'+id,
                cls:'preview single-preview',
                title: d.name,
                tabTip: d.uri,
                html: getPanelTemplate("history_detail_history-tab").apply(d),
                closable:true,
                listeners: HistoryDetailPanel.LinkInterceptor,
                autoScroll:true,
                border:true
            });
            this.add(tab);
        }
        this.setActiveTab(tab);
        this.loadDetail(id, "history-tab");
    },

    openGIPTab : function(record){
        record = (record && record.data) ? record : this.gsm.getSelected();
        var d = record.data;
        var id = d.resource_id;
        var tab;
        if(!(tab = this.getItem('current_status_gip_tabpanel'+id))){
            tab = new Ext.Panel({
                id:'current_status_gip_tabpanel'+id,
                title: d.name+' (GIP)',
                tabTip: 'GIP Information from CEMon/BDII for '+d.name,
                html: 'Loading..',
                closable:true,
                autoLoad:"current/proxy?feed=glue&name="+d.name,
                cls: "gippanel",
                border:true
            });
            this.add(tab);
        }
        this.setActiveTab(tab);
    },
    loadDetail: function(id, prefix) {
        var start_time= history_detail_obj.start_date.picker.getValue().getTime()/1000;
        var end_time= history_detail_obj.end_date.picker.getValue().getTime()/1000;
        var r = Math.random(); //prevent browser caching
        $("#history_detail_"+prefix+id).load("history/proxy?feed=detail&id="+id+"&start_time="+start_time+"&end_time="+end_time+"&rand="+r);
    },
    openAll : function(){
        this.beginUpdate();
        this.grid.store.data.each(this.openTab, this);
        this.endUpdate();
    },
    setStartDateLabel: function(d) {
        var label = d.format('<?=config()->date_format?>');
        $("#history_start_date button").text(label);
    },
    setEndDateLabel: function(d) {
        var label = d.format('<?=config()->date_format?>');
        $("#history_end_date button").text(label);
    },
    setStartTime: function(time) {
        var d = new Date();
        d.setTime(time*1000);
        this.start_date.picker.setValue(d);
        this.setStartDateLabel(d);

        var min_date = new Date();
        min_date.setTime(d.getTime() + 3600*24*1000);
        this.end_date.picker.minDate = min_date;
    },
    setEndTime: function(time) {
        var d = new Date();
        d.setTime(time*1000);
        this.end_date.picker.setValue(d);
        this.setEndDateLabel(d);

        //make sure there will be at least one day between start and end
        var max_date = new Date();
        max_date.setTime(d.getTime() - 3600*24*1000);
        this.start_date.picker.maxDate = max_date;
    }
});
var history_detail_obj = new History_MainPanel();

///////////////////////////////////////////////////////////////////////////////
//
// Application Main Panel
//

var contentPanel = {
    id: 'content-panel',
    region: 'center', // this is what makes this panel into a region within the containing layout
    layout: 'card',
    margins: '2 5 5 0',
    activeItem: '<?=$this->initial_page?>-panel',
    border: false,
    items: [
        home_start_obj, 
        current_detail_obj, 
        current_overview_obj,
        vo_matrix_obj,
        vo_group_obj,
        history_detail_obj
    ]
};


///////////////////////////////////////////////////////////////////////////////
//
// onReady -- think of it as main()
//

Ext.onReady(function(){

    ///////////////////////////////////////////////////////////////////////////
    //
    // Init Ext stuff
    //
    Ext.QuickTips.init();
    Ext.state.SessionProvider = Ext.extend(Ext.state.CookieProvider, {
        readCookies : function(){
            if(this.state){
                for(var k in this.state){
                    if(typeof this.state[k] == 'string'){
                        this.state[k] = this.decodeValue(this.state[k]);
                    }
                }
            }
            return Ext.apply(this.state || {}, Ext.state.SessionProvider.superclass.readCookies.call(this));
        }
    });
    Ext.state.Manager.setProvider(new Ext.state.SessionProvider({state: Ext.appState}));

    ///////////////////////////////////////////////////////////////////////////
    //
    // build main viewport
    //
    new Ext.Viewport({
        layout: 'border',
        title: 'Ext Layout Browser',
        id: 'viewport',
        items: [
            {
                xtype: 'box',
                region: 'north',
                applyTo: 'header',
                height: 40
            }, /*{
                layout: 'border',
                id: 'layout-browser',
                region:'west',
                border: false,
                split:true,
                margins: '2 0 5 5',
                width: 275,
                minSize: 100,
                maxSize: 500,
                items: [menuPanel, informationPanel]
            }*/
            menuPanel
            
            ,contentPanel
        ],
        renderTo: 'viewportarea'
    });

    ///////////////////////////////////////////////////////////////////////////
    //
    // add dynamic toolbar items
    //

    //add current / service type selector
    var tbar = current_detail_obj.grid.getTopToolbar();
    tbar.add('-');
    tbar.addElement('service_type_selector_div');

    var tbar = history_detail_obj.grid.getTopToolbar();
    tbar.add('-');
    tbar.addElement('history_service_type_selector_div');

    var tbar = vo_matrix_obj.getTopToolbar();
    tbar.addElement('vomatrix_toolbar_div');

    var tbar = current_overview_obj.getTopToolbar();
    tbar.addElement('current_overview_toolbar_div');

    ///////////////////////////////////////////////////////////////////////////
    //
    // Initialize parameters...
    //

    //init history date range
    <?
        require_once("app/timerange.php");
        list($yesterday, $today) = getLast24HourRange(); 
        $last_week = $today - 3600*24*7;
    ?>
    history_detail_obj.setStartTime(<?=$last_week?>);
    history_detail_obj.setEndTime(<?=$today?>);

    ///////////////////////////////////////////////////////////////////////////
    //
    // Now, ready to load the initial page
    //
    Ext.getCmp('<?=$this->initial_page?>-panel').loadPage();
    //informationPanel.show('<?=$this->initial_page?>');
    
    ///////////////////////////////////////////////////////////////////////////
    //
    //open curtain
    //
    $("#loading").hide();
    $("#viewportarea").show();

});


