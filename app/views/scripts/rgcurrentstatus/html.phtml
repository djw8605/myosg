<style>
div.resource {
background-color: inherit;
border: none;
}
.content a {
text-decoration: underline;
}
table th {
width: 50px;
}
</style>

<?
$rcount = 0;
foreach($this->rgs as $rgid=>$rg) {
    
    //show resource group header
    $resource_group = $this->resource_groups[$rgid][0];
    echo "<div class=\"group_header\">";
    echo "<span class='h3'>".$resource_group->name."</span>";
    echo " <small>".$resource_group->grid_type."</small>";
    echo "</div>";
 
    foreach($rg as $rid=>$resource) {
        $rcount++;
        $resource_name = $resource->name;

        $disabled = "";
        if($resource->disable == 1) {
            $disabled = "disabled";
        }
        echo "<div class=\"resource $disabled\">";
        echo "<code style=\"float: right;\">$resource->fqdn</code>";
        //display ticket open link if it's active
        if($resource->disable == 0 && $resource->active == 1) {
            echo "<a target=\"_gocticket\" href=\"".config()->gocticket_url."/submit?resource_issue_check=on&resource[$rid]=on\" class=\"sidenote\">";
            echo "<img src=\"".fullbase()."/images/tag_orange.png\" alt=\"Open GOC Ticket\"/ title=\"Open GOC Ticket\"></a>";
        }
        echo "<span class=\"h4\">$resource_name</span>";
        if($resource->disable == 1) {
            echo " (Removed)";
        }
        if($resource->active == 0) {
            echo " (Inactive)";
        }
        echo "</div>";//resource

        if(!isset($this->cache[$rid])) {
            echo "<p class=\"muted\">Current status data is not available for this resource.</p>";
        } else {
            $cache = $this->cache[$rid];
            $timestamp = (int)$cache->Timestamp[0];
            $status = $cache->Status[0];
            $note = $cache->Note[0];
            $services = $cache->Services[0];
            ?>

            <div class="status_<?=$status?>">
            <p><?=$note?></p>
            </div>

            <?php
            echo "<table class=\"table table-bordered\">";
            foreach($services as $service) {
                $service_status = $service->Status;
                $note = $service->Note;
                $downtime_note = $service->DowntimeNote;

                echo "<tr><th>".$service->ServiceName."</th>"; 
                echo "<td>";
                echo "<div class=\"status_$service_status\">";
                if(isset($service->DowntimeNote)) {
                    //downtime info is bit complicated
                    $internal_status = $downtime_note[0]->InternalStatus;
                    $dnote = $downtime_note[0]->Note;
                    $summary = $downtime_note[0]->MaintenanceSummary;
                    $from = $downtime_note[0]->From;
                    $to = $downtime_note[0]->To;

                    echo $dnote;
                    echo "<div class=\"downtime\">";
                    echo "<b>Maintenance Summary</b><div>$summary</div>";
                    echo "<div class=\"row-fluid\">";
                    echo "<div class=\"span6\"><b>From</b><br>$from</div>";
                    echo "<div class=\"span6\"><b>To</b><br>$to</div>";
                    echo "</div>";
                    echo "<b>Internal Status</b><div class=\"status_$internal_status\">$note</div>";
                    echo "</div>";
                } else {
                    //normal status
                    echo "<p>$note</p>";
                }

                //critical metrics
                $critical_outs = array();
                foreach($service->CriticalMetrics[0] as $metric) {

                    if(isset($_REQUEST["current_status_attrs_spe"])) {
                        //need to filter out metrics that are not specified
                        if(!isset($_REQUEST["current_status_attrs_spe_".$metric->MetricID])) {
                            continue;
                        }
                    }

                    $freshfor = $metric->MetricFreshFor;
                    $expired = !MetricData::isFresh($metric->Timestamp, $freshfor, $timestamp);
                    $critical_outs[(string)$metric->MetricCommonName] = outputMetricInfo($metric, $expired);
                }
                
                if(count($critical_outs) != 0) {
                    ksort($critical_outs);
                    echo "<span class=\"h3\">Critical Metrics</span>";
                    foreach($critical_outs as $out) {
                        echo $out;
                    } 
                }

                //non-critical metrics
                if(/*!isset($_REQUEST["uwa"]) and*/ isset($_REQUEST["current_status_attrs_shownc"]) || isset($_REQUEST["current_status_attrs_spe"])) {
                    $non_critical_metrics = $service->NonCriticalMetrics[0];
                    $non_critical_outs = array();
                    $non_critical_expired_outs = array();
                    foreach($non_critical_metrics as $metric) {

                        if(isset($_REQUEST["current_status_attrs_spe"])) {
                            //need to filter out metrics that are not specified
                            if(!isset($_REQUEST["current_status_attrs_spe_".$metric->MetricID])) {
                                continue;
                            }
                        }

                      if($metric->Detail != "") {
                            $freshfor = $metric->MetricFreshFor;
                            $expired = !MetricData::isFresh($metric->Timestamp, $freshfor, $timestamp);
                            if($expired) {
                                $non_critical_expired_outs[(string)$metric->MetricCommonName] = outputMetricInfo($metric, $expired);
                            } else {
                                $non_critical_outs[(string)$metric->MetricCommonName] = outputMetricInfo($metric, $expired);
                            }
                        }
                    }
                    if(count($non_critical_outs) != 0) {
                        ksort($non_critical_outs);
                        echo "<span class=\"h3\">Non-Critical Metrics</span>";
                        foreach($non_critical_outs as $out) {
                            echo $out;
                        }
                    }
                    if(count($non_critical_expired_outs) != 0) {
                        ksort($non_critical_expired_outs);
                        $detail = "";
                        foreach($non_critical_expired_outs as $out) {
                            $detail .= $out;
                        }
                        echo outputToggle(
                            "<span class=\"h3\">Expired Non-Critical Metrics</span>", 
                            "<span class=\"h3\">Expired Non-Critical Metrics</span>", $detail);
                    }
                }

                echo "</div>"; //status_
                echo "</td></tr>";
            }
            echo "</table>";
        }
    }
}

if($rcount > 0) {
    echo "<p class=\"muted\">Displaying ".count($this->rgs)." resource groups / $rcount resources</p>";
}

function outputMetricInfo($metric, $expired)
{
    $out = "";

    $reported = (int)($metric->MetricDataID[0]) != 0;
    $detail = $metric->Detail;
    $service_uri = $metric->ServiceURI;
    $gathered_at = $metric->GatheredAt;

    $name = $metric->MetricCommonName;
    $desc = $metric->MetricDescription;
    $help_url = config()->default_rsvforum;
    if(isset(config()->rsvforum[(int)$metric->MetricID])) {
        $help_url = config()->rsvforum[(int)$metric->MetricID];
    }

    if($reported) {
        $css = "";
        if($expired) $css = "expired";
        $out .= "<div class=\"status_".$metric->Status." $css\">";
        $out .= "<div class=\"sidenote\">Reported ".agoCalculation((int)$metric->Timestamp)." ago</div>";
        if($expired) $name .= " (Expired)";
    } else {
        $out .= "<div class=\"status_UNKNOWN notreported\">";
        $name .= " (Not Reported)";
    }

    $out .= "<span class=\"h4\" rel=\"tooltip\" title=\"".$desc."\">$name</span>";
    if(!uwa()) {
        //$out .= " <a target=\"_help\" href=\"$help_url\"><img src=\"".fullbase()."/images/help.png\" style='align: bottom;'/></a>";
        //$out .= "<br/><span class=\"note\">$desc</span>";
        if(trim($detail) != "") {
            $detail = "<pre>$detail</pre>";
            $id = $metric->MetricDataID;
            $fresh_for = $metric->MetricFreshFor;
            $detail .= "Fresh for: ".humanDuration($fresh_for);
            $detail .= "&nbsp;&nbsp;&nbsp;Service URI: ".$service_uri;

            $detail .= "&nbsp;&nbsp;&nbsp;Gathered At: $gathered_at";
            //check if service_uri and gathered_at are on the same domain
            preg_match("/[^\.\/]+\.[^\.\/]+$/", $service_uri, $matches);
            if(isset($matches[0])) {
                $service_uri_domain = $matches[0];
            } else {
                //wlog("strange service_uri given".$service_uri);
                $service_uri_domain = "unknown";
            }
            preg_match("/[^\.\/]+\.[^\.\/]+$/", $gathered_at, $matches);
            if(isset($matches[0])) {
                $gathered_at_domain = $matches[0];
            } else {
                //wlog("strange gathered_at given: ".$gathered_at);
                $gathered_at_domain = "unknown";
            }
            if($service_uri_domain != $gathered_at_domain) {
                $detail .= " <span class=\"label label-warning\">Not on the same domain</span>";
            }

            $detail .= "<br/>";
            $out .= outputToggle("Show Detail", null, $detail);
        }
    }
    $out .= "</div>";
    return $out;
}

